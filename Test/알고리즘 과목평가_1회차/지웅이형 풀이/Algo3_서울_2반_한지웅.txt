3-1 완전 검색에 대한 설명과 장단점
- 완전검색은 주어진 데이터를 처음부터 하나하나 살펴 검색하는 방법이다.

장점 : 주어진 데이터를 하나하나 살펴보기에, 정렬이 되어 있을 필요가 없다. 뿐만 아니라 시간만 충분하다면 쉽게 데이터를 찾을 수 있다는 장점이 있다.
단점 : 하나하나 살펴본다는 점은 비효율적이다. 데이터가 적은 경우엔 큰 문제가 없지만, 데이터가 많아지는 경우엔 완전검색 방법은 상당한 낭비를 가져올 것이다.

3-2 베이비진을 완전검색으로 판단하는 방법 설명
베이비진을 판단하기 위해선 Triplet과 Run이 각각 몇번 이루어졌는지 확인하는 과정을 거쳐야한다.
더불어 Run_cnt, Triplet_cnt 를 0으로 두고 Run과 Triplet이 발생했을 경우 이를 추가하여 최종 판단에 활용한다.

1. 주어진 6개의 숫자를 하나하나 살펴 각 숫자가 몇번씩 반복되었는지 확인한다.
이를 확인하기 위해 0부터 9까지의 Index를 가지는 10개의 [0]으로 구성된 새로운 check_list를 제작하여 활용한다.
주어진 카드 번호 목록을 보고 그 숫자에 해당하는 새로운 check_list의 Index에 있는 원소의 값을 하나씩 올려 해당 숫자가 몇번 나왔는지 기록한다.

2. 이후 3번이상 6번 미만으로 한 숫자가 반복되었는지, 6번 한 숫자가 반복되었는지 확인한다.
check_list를 완전검색하여 6이 있는 경우엔 Triplet_cnt를 2 추가하고 3 이상 6 미만의 반복이 있는 경우엔 Triplet_cnt 를 1 추가한다.
Triplet_cnt를 2 추가한 경우 바로 Baby Gin을 도출하면 된다.
Triplet_cnt를 1 추가한 경우엔 해당 숫자를 -3 하고 다음 과정을 진행한다.

3. 연속된 숫자가 존재하는지 확인한다.
이 때, for i in range(0,N-2)범위를 탐색하고 이 범위 내에서 check_list[i], check_list[i+1], check_list[i+2]를 확인한다.
    a) 체크리스트를 보고 2의 원소를 가진(2번 나온 것들)이 연속해서 3번 있는지 확인한다.
        - Run_cnt를 2 추가한다.
    b) 체크리스트를 보고 1의 원소를 가진(2번 나온 것들)이 연속해서 3번 있는지 확인한다.
        - Run_cnt를 1 추가한다.

4. 최종 판단
최종판단을 하기 위해 Run_cnt와 Triplet_cnt를 활용한다.
Baby Gin은 Triplet 2회, Run 2회, Triplet과 Run 각각 1회인 경우 발생하므로 Run_cnt와 Triplet_cnt의 합이 2인 경우 발생한다고 할 수 있다.
이를 판단하는 과정을 거쳐 Baby Gin을 판단한다.