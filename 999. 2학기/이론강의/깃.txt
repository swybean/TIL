# 커밋

## 커밋 시점과 횟수는 중요한 고려사항   

**시점** : 논리적으로 완결된 작업 단위마다 커밋      
**횟수** : 작은 단위로 자주 커밋하는 것을 권장  

**커밋 작성 규칙(컨벤션)**    
- 다른 개발자 작업내역, 변경사항 파악하는데 중요  
(일관된 커밋 메시지 작성이 매우 중요)  
- 추천 : Conventional Commits (규칙 가이드)   

**추천 컨벤션 규칙**       
feat(타입) : 제목   
본문(내용)   
꼬리말(JIRA이슈번호)   

※ 본문, 꼬릿말은 옵션

---

## 브랜치
- 기존 코드는 그대로 두고 새로운 작업을 할 수 있는 공간을 제공   
- 브랜치는 원하는 만큼 생성 가능
- 개발 중 불필요/부적합 판단되면 그냥 브랜치 삭제하면 됨  
- 개발이 성공적으로 된다면 머지(병합)하기    
- 브랜치를 너무 남용하면 오히려 관리 및 작업이 복잡해짐  
(그래서 '브랜치 전략'이 필요함)

  
**브랜치 전략** : 브랜치를 어떻게 생성하고 관리하며 통합할지에 대한 규칙과 워크플로우 정의   
(git-flow 추천, github-flow는 git-flow에서 좀 쳐낸 버전)

-
**merge** : git merge 명령어를 통해서 두 개의 다른 브랜치를 하나로 통합하는 작업

**Merge Request(or Pull Request)**  
원격저장소(GitHub, GitLab)에서 제공하는 기능   
Merge 작업을 수행하기 전의 검토 과정(코드 리뷰)을 포함











